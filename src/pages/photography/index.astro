---
export const prerender = true;

import { getCollection } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import PageContainer from "@components/PageContainer.astro";
import PageHeader from "@components/PageHeader.astro";
import Section from "@components/Section.astro";
import PhotoCard from "@components/PhotoCard.astro";
import PhotoLightbox from "@components/PhotoLightbox.astro";
import { PHOTOGRAPHY } from "@lib/config";
import {
  generateImageStructuredData,
  processPhotoForStatic,
  sortPhotosByDate,
  type ProcessedPhoto,
} from "@lib/photo-utils";
import { formatDate } from "@lib/config";

const allPhotos = await getCollection("photography", ({ data }) => !data.draft);
const sortedPhotos = sortPhotosByDate(allPhotos);

const PHOTOS_PER_PAGE = 8;
const INITIAL_PHOTOS_COUNT = 6;

const initialPhotoEntries = sortedPhotos.slice(0, INITIAL_PHOTOS_COUNT);
const initialProcessedPhotos: ProcessedPhoto[] = [];

for (const photo of initialPhotoEntries) {
  const processed = await processPhotoForStatic(photo, formatDate);
  if (processed) {
    initialProcessedPhotos.push(processed);
  }
}

const photosByYear = initialProcessedPhotos.reduce(
  (acc, photo) => {
    const year = new Date(photo.data.date).getFullYear();
    if (!acc[year]) {
      acc[year] = [];
    }
    acc[year].push(photo);
    return acc;
  },
  {} as Record<number, ProcessedPhoto[]>,
);

const years = Object.keys(photosByYear)
  .map(Number)
  .sort((a, b) => b - a);

const allPhotosData = await Promise.all(
  sortedPhotos.map(async (photo) => {
    const processed = await processPhotoForStatic(photo, formatDate);
    return processed;
  }),
);

const validPhotosData = allPhotosData.filter(Boolean) as ProcessedPhoto[];

const structuredData = generateImageStructuredData(sortedPhotos);
const totalPhotos = validPhotosData.length;
---

<PageLayout
  title={PHOTOGRAPHY.TITLE}
  description={PHOTOGRAPHY.DESCRIPTION}
  currentPath="/photography/"
  ogType="website"
  keywords="photography, photos, art, creative, visual"
>
  <script
    type="application/ld+json"
    set:html={JSON.stringify(structuredData)}
  />

  <PageContainer spacing="md">
    <PageHeader
      title={PHOTOGRAPHY.TITLE}
      description={PHOTOGRAPHY.DESCRIPTION}
      size="lg"
    />

    <div id="photos-container" class="space-y-12">
      {
        years.map((year) => (
          <Section spacing="md" aria-labelledby={`year-${year}`}>
            <div class="flex justify-end">
              <h2
                id={`year-${year}`}
                class="text-primary font-display text-xl font-semibold"
              >
                {year}
              </h2>
            </div>

            <div
              class="space-y-4"
              role="list"
              aria-label={`Photos from ${year}`}
              data-year={year}
            >
              {photosByYear[year].map((photo, index) => (
                <div role="listitem">
                  <PhotoCard
                    photo={photo}
                    loading={index < 2 ? "eager" : "lazy"}
                  />
                </div>
              ))}
            </div>
          </Section>
        ))
      }
    </div>

    <!-- Loading indicator -->
    <div
      id="loading-indicator"
      class="hidden py-8 text-center"
      aria-live="polite"
      aria-label="Loading more photos"
    >
      <div
        class="inline-flex items-center gap-2 text-text-secondary dark:text-text-secondary-dark"
      >
        <div
          class="h-4 w-4 animate-spin rounded-full border-2 border-text-secondary border-t-transparent"
          aria-hidden="true"
        >
        </div>
        <span>Loading more photos...</span>
      </div>
    </div>

    <!-- End indicator -->
    <div id="end-indicator" class="hidden py-8 text-center" aria-live="polite">
      <p class="italic text-text-secondary dark:text-text-secondary-dark">
        That's all folks!
      </p>
    </div>

    {
      initialProcessedPhotos.length === 0 && (
        <div class="py-12 text-center">
          <p class="text-text-secondary">No photos found.</p>
        </div>
      )
    }
  </PageContainer>
</PageLayout>
<PhotoLightbox />

<script
  define:vars={{
    allPhotosData: validPhotosData,
    photosPerPage: PHOTOS_PER_PAGE,
    initialCount: INITIAL_PHOTOS_COUNT,
  }}
>
  let currentIndex = initialCount;
  let isLoading = false;

  window.staticPhotoLoader = {
    hasMorePhotos: () => currentIndex < allPhotosData.length,
    loadMorePhotos: () =>
      new Promise((resolve) => {
        if (!window.staticPhotoLoader.hasMorePhotos() || isLoading)
          return resolve();
        const wasLoading = isLoading;
        loadMorePhotos();
        if (!wasLoading) {
          const checkComplete = () =>
            isLoading ? setTimeout(checkComplete, 50) : resolve();
          checkComplete();
        } else resolve();
      }),
  };

  function createPhotoHTML(photo) {
    const escapeHtml = (str) => str.replace(/"/g, "&quot;");
    const exifTags = photo.exifItems?.length
      ? `<div class="flex flex-wrap justify-center gap-1 text-xs">
        ${photo.exifItems.map((item) => `<span class="px-2 py-1 font-mono bg-border dark:bg-border-dark text-text-secondary dark:text-text-secondary-dark text-center">${item}</span>`).join("")}
      </div>`
      : "";

    return `
      <div role="listitem">
        <div class="group relative flex flex-col border border-border dark:border-border-dark bg-card dark:bg-card-dark hover:border-text-secondary dark:hover:border-text-secondary-dark transition-all duration-200 hover:shadow-sm overflow-hidden"
             data-photo-trigger
             data-full-image="${photo.images.lightboxImage.src}"
             data-title="${escapeHtml(photo.data.title)}"
             data-content="${escapeHtml(photo.body || "")}"
             tabindex="0"
             role="button"
             aria-label="View photo: ${escapeHtml(photo.data.title)}">
          <div class="relative cursor-pointer">
            <img src="${photo.images.thumbnailImage.src}"
                 alt="${escapeHtml(photo.data.title)}"
                 width="${photo.images.thumbnailImage.attributes.width}"
                 height="${photo.images.thumbnailImage.attributes.height}"
                 class="img-loading h-auto w-full object-contain transition-transform duration-300"
                 loading="lazy"
                 decoding="async"
                 onload="this.classList.remove('img-loading')" />
            <div class="absolute inset-0 flex items-center justify-center bg-black/0 transition-colors duration-300 group-hover:bg-black/10">
              <div class="bg-background/90 p-2 opacity-0 transition-opacity duration-200 group-hover:opacity-100 dark:bg-background-dark/90">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-primary" aria-hidden="true">
                  <line x1="12" y1="5" x2="12" y2="19"></line>
                  <line x1="5" y1="12" x2="19" y2="12"></line>
                </svg>
              </div>
            </div>
          </div>
          <div class="flex items-start gap-4 p-4">
            <div class="min-w-0 flex-1">
              <div class="mb-2 flex items-start justify-between gap-4">
                <div class="font-display text-lg font-semibold text-primary">${photo.data.title}</div>
                <time datetime="${new Date(photo.data.date).toISOString()}" class="whitespace-nowrap text-sm text-text-secondary dark:text-text-secondary-dark">${photo.formattedDate}</time>
              </div>
              ${exifTags}
            </div>
          </div>
        </div>
      </div>`;
  }

  function loadMorePhotos() {
    if (isLoading || !window.staticPhotoLoader.hasMorePhotos()) return;

    isLoading = true;
    const elements = {
      loading: document.getElementById("loading-indicator"),
      container: document.getElementById("photos-container"),
      endIndicator: document.getElementById("end-indicator"),
    };

    if (!elements.container) return;

    elements.loading?.classList.remove("hidden");

    const nextPhotos = allPhotosData.slice(
      currentIndex,
      currentIndex + photosPerPage,
    );
    if (!nextPhotos.length) {
      elements.loading?.classList.add("hidden");
      elements.endIndicator?.classList.remove("hidden");
      isLoading = false;
      return;
    }

    const photosByYear = nextPhotos.reduce((acc, photo) => {
      const year = new Date(photo.data.date).getFullYear();
      (acc[year] = acc[year] || []).push(photo);
      return acc;
    }, {});

    Object.entries(photosByYear).forEach(([year, photos]) => {
      const section = document.createElement("section");
      section.className = "space-y-6";
      section.innerHTML = `
        <div class="flex justify-end">
          <h2 class="font-display text-xl font-semibold text-primary">${year}</h2>
        </div>
        <div class="space-y-4" role="list" data-year="${year}">
          ${photos.map(createPhotoHTML).join("")}
        </div>`;
      elements.container.appendChild(section);
    });

    currentIndex += nextPhotos.length;
    isLoading = false;
    elements.loading?.classList.add("hidden");

    window.setupPhotoLightboxTriggers?.();
    if (!window.staticPhotoLoader.hasMorePhotos()) {
      elements.endIndicator?.classList.remove("hidden");
    }
  }

  if (document.querySelector("#photos-container")) {
    const observer = new IntersectionObserver(
      (entries) => entries[0].isIntersecting && !isLoading && loadMorePhotos(),
      { rootMargin: "200px" },
    );

    const sentinel = document.createElement("div");
    sentinel.style.height = "1px";
    document
      .getElementById("loading-indicator")
      ?.parentNode.insertBefore(
        sentinel,
        document.getElementById("loading-indicator"),
      );
    observer.observe(sentinel);
  }
</script>
