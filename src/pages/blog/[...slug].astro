---
import { getCollection } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";
import BackToPrev from "@components/BackToPrev.astro";
import Message from "@components/Message.astro";
import Sidenote from "@components/Sidenote.astro";

export const prerender = true;

export async function getStaticPaths() {
  const blogEntries = await getCollection("blog", ({ data }) => {
    return !data.draft;
  });

  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content, headings, remarkPluginFrontmatter } = await entry.render();

const readingTime = remarkPluginFrontmatter?.minutesRead || "1 min read";

const components = {
  Message,
  Sidenote,
};
---

<PageLayout
  title={entry.data.title}
  description={entry.data.description || entry.data.summary}
  currentPath={`/blog/${entry.slug}/`}
  ogType="article"
>
  <Container>
    <div class="space-y-8">
      <div>
        <BackToPrev href="/blog"> Back to blog </BackToPrev>
      </div>

      <div class="space-y-4">
        <div
          class="flex items-center gap-2 text-sm text-text-secondary dark:text-text-secondary-dark"
        >
          <FormattedDate date={entry.data.date} format="%B %d, %Y" />
          <span>•</span>
          <span>{readingTime}</span>
          {
            entry.data.last_modified_at && (
              <>
                <span>•</span>
                <span>
                  Updated:{" "}
                  <FormattedDate
                    date={entry.data.last_modified_at}
                    format="%B %d, %Y"
                  />
                </span>
              </>
            )
          }
        </div>

        <div>
          <h1
            class="font-display text-3xl font-semibold leading-tight text-text-primary"
          >
            {entry.data.title}
          </h1>
        </div>
      </div>

      <article class="prose prose-lg max-w-none">
        <Content components={components} />
      </article>

      <div class="border-t border-border pt-8 text-center">
        <p class="text-lg italic text-text-secondary text-text-secondary-dark">
          Got any questions or comments, or just want to say hello?<br />Drop by
          on my email!
        </p>
      </div>
    </div>
  </Container>
</PageLayout>

<script is:inline data-astro-rerun>
  function createProgressBar() {
    if (document.getElementById("progress-bar")) return;

    const progressBar = document.createElement("div");
    progressBar.id = "progress-bar";
    progressBar.className =
      "fixed top-0 left-0 h-1 bg-link dark:bg-link-dark transition-all duration-75 ease-out";
    progressBar.style.cssText = "width: 0%; z-index: 1000;";
    document.body.appendChild(progressBar);

    return progressBar;
  }

  function updateProgress() {
    const progressBar = document.getElementById("progress-bar");
    if (!progressBar) return;

    const scrolled =
      (window.scrollY /
        (document.documentElement.scrollHeight - window.innerHeight)) *
      100;
    progressBar.style.width = Math.min(Math.max(scrolled, 0), 100) + "%";
  }

  createProgressBar();
  updateProgress();

  if (!window.progressScrollSetup) {
    let rafId = null;
    document.addEventListener(
      "scroll",
      () => {
        if (rafId) return;
        rafId = requestAnimationFrame(() => {
          updateProgress();
          rafId = null;
        });
      },
      { passive: true },
    );
    window.progressScrollSetup = true;
  }
</script>
