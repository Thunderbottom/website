---
import type { ProcessedPhoto } from "@lib/photo-utils";

interface Props {
  photo: ProcessedPhoto;
  loading?: "lazy" | "eager";
}

const { photo, loading = "lazy" } = Astro.props;
const { data, images, exifItems, formattedDate } = photo;

// Helper function to escape HTML for attributes
function escapeHtml(text: string): string {
  if (typeof text !== "string") return "";
  return text
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#39;");
}
---

<div
  class="group relative flex flex-col overflow-hidden rounded-lg border border-border bg-card transition-all duration-300 hover:-translate-y-0.5 hover:border-text-secondary hover:bg-gray-50 hover:shadow-md dark:border-border-dark dark:bg-card-dark dark:hover:border-text-secondary-dark dark:hover:bg-gray-800"
>
  <div
    class="relative cursor-pointer"
    data-photo-trigger
    data-full-image={images.lightboxImage.src}
    data-title={escapeHtml(data.title)}
    data-content={escapeHtml(photo.body || "")}
    tabindex="0"
    role="button"
    aria-label={`View photo: ${data.title}`}
  >
    <img
      src={images.thumbnailImage.src}
      alt={data.title}
      width={images.thumbnailImage.attributes.width}
      height={images.thumbnailImage.attributes.height}
      class="img-loading h-auto w-full object-contain transition-transform duration-300"
      loading={loading}
      decoding="async"
      onload="this.classList.remove('img-loading')"
    />

    <div
      class="absolute inset-0 flex items-center justify-center bg-black/0 transition-colors duration-300 group-hover:bg-black/10"
    >
      <div
        class="rounded-full bg-white/90 p-2 opacity-0 transition-opacity duration-300 group-hover:opacity-100 dark:bg-black/90"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="text-text-primary dark:text-text-primary-dark"
          aria-hidden="true"
        >
          <line x1="12" y1="5" x2="12" y2="19"></line>
          <line x1="5" y1="12" x2="19" y2="12"></line>
        </svg>
      </div>
    </div>
  </div>

  <div class="flex items-start gap-4 p-4">
    <div class="min-w-0 flex-1">
      <div class="mb-2 flex items-start justify-between gap-4">
        <div
          class="font-display text-lg font-semibold text-text-primary transition-colors group-hover:text-link dark:text-text-primary-dark dark:group-hover:text-link-dark"
        >
          {data.title}
        </div>
        <time
          datetime={new Date(data.date).toISOString()}
          class="whitespace-nowrap text-sm text-text-secondary dark:text-text-secondary-dark"
        >
          {formattedDate}
        </time>
      </div>

      {
        exifItems.length > 0 && (
          <div class="flex flex-wrap justify-center gap-1 text-xs">
            {exifItems.map((item) => (
              <span class="rounded-md bg-gray-200 px-2 py-1 text-center font-mono text-text-secondary dark:bg-gray-700 dark:text-text-secondary-dark">
                {item}
              </span>
            ))}
          </div>
        )
      }
    </div>
  </div>
</div>
