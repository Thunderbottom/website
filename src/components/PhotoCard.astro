---
import type { ProcessedPhoto } from "@lib/photo-utils";
import Tag from "@components/Tag.astro";
import { escapeHtml } from "@lib/utils";

interface Props {
  photo: ProcessedPhoto;
  loading?: "lazy" | "eager";
}

const { photo, loading = "lazy" } = Astro.props;
const { data, images, exifItems, formattedDate } = photo;
---

<div
  class="card group flex flex-col overflow-hidden"
  data-photo-trigger
  data-full-image={images.lightboxImage.src}
  data-title={escapeHtml(data.title)}
  data-content={escapeHtml(photo.body || "")}
  tabindex={0}
  role="button"
  aria-label={`View photo: ${data.title}`}
>
  <div class="relative cursor-pointer">
    <img
      src={images.thumbnailImage.src}
      alt={data.title}
      width={images.thumbnailImage.attributes.width}
      height={images.thumbnailImage.attributes.height}
      class="img-loading h-auto w-full object-contain transition-transform duration-300"
      loading={loading}
      decoding="async"
      onload="this.classList.remove('img-loading')"
    />

    <div
      class="absolute inset-0 flex items-center justify-center bg-black/0 transition-colors duration-300 group-hover:bg-black/10"
    >
      <div
        class="bg-background/90 p-2 opacity-0 transition-opacity duration-200 group-hover:opacity-100 dark:bg-background-dark/90"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="text-primary"
          aria-hidden="true"
        >
          <line x1="12" y1="5" x2="12" y2="19"></line>
          <line x1="5" y1="12" x2="19" y2="12"></line>
        </svg>
      </div>
    </div>
  </div>

  <div class="card-content">
    <div class="content-flex">
      <div class="mb-2 flex items-start justify-between gap-4">
        <div class="heading-lg">
          {data.title}
        </div>
        <time
          datetime={new Date(data.date).toISOString()}
          class="text-secondary-color whitespace-nowrap text-sm"
        >
          {formattedDate}
        </time>
      </div>

      {
        exifItems.length > 0 && (
          <div class="flex flex-wrap justify-center gap-1 text-xs">
            {exifItems.map((item) => (
              <Tag text={item} centered />
            ))}
          </div>
        )
      }
    </div>
  </div>
</div>
