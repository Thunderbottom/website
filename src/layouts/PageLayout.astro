---
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import BackToTop from "@components/BackToTop.astro";
import { SITE } from "@lib/config";
import { ViewTransitions } from "astro:transitions";
import "../styles/global.css";

interface Props {
  title?: string;
  description?: string;
  keywords?: string;
  ogType?: string;
  ogImage?: string;
  currentPath?: string;
}

const {
  title = "Home",
  description = SITE.DESCRIPTION,
  keywords = "astro, blog, technology, life, linux",
  ogType = "website",
  ogImage,
  currentPath = "",
} = Astro.props;

const pageTitle = title === SITE.NAME ? title : `${title} | ${SITE.NAME}`;
const canonicalURL = new URL(currentPath, SITE.URL);

const finalOgImage = ogImage || Astro.locals.ogImageUrl || `${SITE.URL}/og.png`;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />

    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="theme-color" content="#f8fafc" />
    <meta
      name="theme-color"
      content="#0f0f19"
      media="(prefers-color-scheme: dark)"
    />

    <meta http-equiv="X-Content-Type-Options" content="nosniff" />
    <meta http-equiv="Permissions-Policy" content="interest-cohort=()" />

    <link
      rel="preload"
      href="/fonts/atkinson-hyperlegible-next/atkinson-hyperlegible-next-variable.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    {
      currentPath.includes("/blog/") && (
        <link
          rel="preload"
          href="/fonts/commit-mono/CommitMono-400-Regular.woff2"
          as="font"
          type="font/woff2"
          crossorigin
        />
      )
    }

    <script is:inline>
      function getTheme() {
        return (
          localStorage.getItem("theme") ||
          (window.matchMedia("(prefers-color-scheme: dark)").matches
            ? "dark"
            : "light")
        );
      }

      function applyTheme(theme) {
        document.documentElement.classList.toggle("dark", theme === "dark");
        document.documentElement.setAttribute("data-theme", theme);
      }

      function updateThemeToggleButton(theme) {
        const button = document.getElementById("theme-toggle");
        if (button) {
          button.setAttribute(
            "aria-label",
            theme === "dark" ? "Switch to light theme" : "Switch to dark theme",
          );
        }
      }

      function setupTheme() {
        const theme = getTheme();
        applyTheme(theme);
        updateThemeToggleButton(theme);
      }

      setupTheme();

      document.addEventListener("click", (e) => {
        const button = e.target.closest("#theme-toggle");
        if (!button) return;

        e.preventDefault();

        const isDark = document.documentElement.classList.contains("dark");
        const newTheme = isDark ? "light" : "dark";

        localStorage.setItem("theme", newTheme);
        applyTheme(newTheme);
        updateThemeToggleButton(newTheme);
      });

      document.addEventListener("astro:after-swap", () => {
        const theme = getTheme();
        applyTheme(theme);
      });

      document.addEventListener("astro:page-load", () => {
        const theme = getTheme();
        applyTheme(theme);
        updateThemeToggleButton(theme);
      });

      window.setupUI =
        window.setupUI ||
        (() => {
          requestAnimationFrame(() => {
            document.documentElement.classList.toggle(
              "scrolled",
              window.scrollY > 0,
            );
          });

          document
            .querySelectorAll(".sidenote-toggle, .margin-toggle")
            .forEach((toggle) => {
              if (!toggle.hasListener) {
                const updateIcon = () => {
                  const label = toggle.previousElementSibling;
                  if (label?.classList.contains("sidenote-ref")) {
                    label.setAttribute(
                      "data-expanded",
                      toggle.checked.toString(),
                    );
                    toggle.setAttribute(
                      "aria-expanded",
                      toggle.checked.toString(),
                    );
                  }
                };
                updateIcon();
                toggle.addEventListener("change", updateIcon);
                toggle.hasListener = true;
              }
            });
        });

      if (!window.scrollListener) {
        let rafId = null;
        document.addEventListener(
          "scroll",
          () => {
            if (rafId) return;
            rafId = requestAnimationFrame(() => {
              document.documentElement.classList.toggle(
                "scrolled",
                window.scrollY > 0,
              );
              rafId = null;
            });
          },
          { passive: true },
        );
        window.scrollListener = true;
      }

      window.setupUI();
    </script>

    <title>{pageTitle}</title>
    <meta name="title" content={pageTitle} />
    <meta name="description" content={description} />
    <meta name="keywords" content={keywords} />
    <meta name="author" content={SITE.NAME} />

    <link rel="canonical" href={canonicalURL} />

    <link
      rel="alternate"
      type="application/rss+xml"
      title="RSS"
      href="/rss.xml"
    />

    <meta property="og:type" content={ogType} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={pageTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={finalOgImage} />
    <meta property="og:site_name" content={SITE.NAME} />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:url" content={canonicalURL} />
    <meta name="twitter:title" content={pageTitle} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={finalOgImage} />

    <link
      rel="icon"
      type="image/png"
      href="/icons/favicon/favicon-96x96.png"
      sizes="96x96"
    />
    <link rel="shortcut icon" href="/icons/favicon/favicon.ico" />
    <link
      rel="apple-touch-icon"
      sizes="180x180"
      href="/icons/favicon/apple-touch-icon.png"
    />
    <meta name="apple-mobile-web-app-title" content={SITE.NAME} />
    <link rel="manifest" href="/icons/favicon/site.webmanifest" />

    <ViewTransitions />
  </head>

  <body>
    <Header />
    <main id="main-content" tabindex="-1">
      <slot />
    </main>
    <Footer />
    <BackToTop />
  </body>
</html>
